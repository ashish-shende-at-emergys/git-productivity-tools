#!/bin/sh
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color
TARGET_PROJECT=./Solutions/WebApi/WebApi.csproj
NUGET_SOURCE=https://api.nuget.org/v3/index.json
TOOLS_FOLDER="c:\\\tools"
GITLEAK_PATH="c:\\tools\\gitleaks.exe"
GITLEAK_DOWNLOAD_URL="https://github.com/gitleaks/gitleaks/releases"
staged_files=$(git diff --cached --name-only --diff-filter=ACMR)

printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tRunning pre-commit checks${NC}"		
printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tChecking Python folder ${NC}"		
printf "\n${YELLOW}----------------------------------------------------------------------------------${NC}\n"
PY_VER=$(py -3 -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')")
CODESPELL_PATH="$APPDATA\\Python\\Python$PY_VER\\Scripts\\codespell.exe"
printf "\n Python [Version:$PY_VER] Installed on System.\n"
printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tChecks for Spelling Mistakes                                                         ${NC}"
printf "\n${YELLOW}==================================================================================${NC}"

printf "\nChecking codespell...\n"

if [ -x "$CODESPELL_PATH" ]; then
    printf "\n${GREEN} CodeSpell [Spelling Check Tool] installed on systems.${NC}\n"
else
    printf "\n${RED} CodeSpell [Spelling Check Tool] not installed on systems.${NC}\n"
	printf "\n Installinng CodeSpell [Spelling Check Tool] on system...\n"
    python.exe -m pip install --force-reinstall codespell
	printf "\n----------------------------------------------------------------------------------${NC}"
fi


printf "\nRunning Spelling Mistakes Check on Staged files...\n"
for file in $staged_files; do
	printf "\nFile:${YELLOW}'$file'${NC}\n"
	"$CODESPELL_PATH" --quiet-level=2 --check-hidden "$file"	
	if [ $? -ne 0 ]; then
	  printf "\n${RED} Spelling Mistakes found. Please fix before committing.${NC}"
	  printf "\n----------------------------------------------------------------------------------${NC}"
	fi
done


printf "\nSpelling Mistakes Scanning completed.\n\n"


printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\tChecks for Creds/Tokens/Other potential confidential Information                     ${NC}"
printf "\n${YELLOW}==================================================================================${NC}\n"


if [ -x "$GITLEAK_PATH" ]; then
    printf "\n${GREEN} gitleaks [Creds Check Tool] installed on systems.${NC}\n"
else
    printf "\n${RED} gitleaks [Creds Check Tool] not installed on systems.${NC}\n"
	printf "\n----------------------------------------------------------------------------------${NC}"
	printf "\n${BLUE}Follow below steps for gitleaks                     						${NC}"
	printf "\n1. Download gitleaks from URL: ${GITLEAK_DOWNLOAD_URL}                     		${NC}"
	printf "\n2. Extract gitleaks_x.yy.z_windows_x64                							${NC}"
	printf "\n3. Copy Contents [gitleaks.exe] to ${TOOLS_FOLDER}			                    ${NC}"
	printf "\n4. Run Commit Commans											                    ${NC}"
	printf "\n----------------------------------------------------------------------------------${NC}"
fi



printf "\nRunning gitleaks on Staged files...\n"
c:\\tools\\gitleaks detect --verbose --redact

if [ $? -ne 0 ]; then
  printf "\n${RED}gitleaks found potential secrets. Please fix before committing.${NC}\n"
  #exit 1
fi

printf "\nSecrets [gitleaks] scanning completed.\n\n"

printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tRunning preliminary checks (e.g., build)...						${NC}"
printf "\n${YELLOW}==================================================================================${NC}"

# dotnet build ./Solutions/AP.Quickstrike.Functions/AP.Quickstrike.Functions.csproj -clp:ErrorsOnly

printf "\nBuilding Web Project [AP.QuickStrike.Web]."
dotnet build ${TARGET_PROJECT} -clp:ErrorsOnly
if [ $? -ne 0 ]; then
    printf "\nBuild failed. Please fix the errors before committing."
    exit 1
fi

printf "\nRunning preliminary check passed."



printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tRunning Packages Analysis  			           "
printf "\n${YELLOW}==================================================================================${NC}"

printf "\nChecking for deprecated Packages...."

dotnet list ${TARGET_PROJECT} package --deprecated  

printf "\nChecking for vulnerable Packages...."

dotnet list ${TARGET_PROJECT} package --vulnerable  
printf "\nChecking for outdated Packages...."

dotnet list ${TARGET_PROJECT} package --outdated  

printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tRunning static analysis 			           "
printf "\n${YELLOW}==================================================================================${NC}"

printf "\nStatic Analysis using Microsoft.DevSkim.CLI."

printf "\nInstalling Microsoft.DevSkim.CLI.......\n"
dotnet tool install --global Microsoft.CST.DevSkim.CLI 

printf "\nRunning Microsoft.DevSkim.CLI analyzer"

timestamp=$(date +"%Y%m%d_%H%M%S")
log_file="DevSkim_$timestamp.log"


#devskim analyze --source-code ./Solutions --output-format sarif --severity Critical 

printf "\n${YELLOW}-------------------------------------------------------------------------------${NC}"
printf "\nSAST: Microsoft.DevSkim Scan results available in $log_file${NC}"
printf "\n${YELLOW}-------------------------------------------------------------------------------${NC}"

devskim analyze --source-code ./Solutions --output-format sarif --severity Critical > "$log_file"

printf "\nStatic Analysis completed, Please check for vulnerabilities."


printf "\n${YELLOW}==================================================================================${NC}"
printf "\n\t\t\tAll Pre-commit checks passed.	${NC}"					 												
printf "\n${YELLOW}==================================================================================${NC}"


exit 0